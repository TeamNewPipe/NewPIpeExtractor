allprojects {
    apply plugin: 'java-library'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    version 'v0.13.0'

    repositories {
        jcenter()
    }
}

subprojects {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.withType(Test) {
        testLogging {
            events "skipped", "failed"
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    artifacts {
        archives sourcesJar
    }
}

task deleteJar(type: Delete) {
    delete 'libs/jars/logmanagementlib.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'logmanagementlib.jar')
}

createJar.dependsOn(deleteJar, build)

// https://discuss.gradle.org/t/best-approach-gradle-multi-module-project-generate-just-one-global-javadoc/18657/21
task aggregatedJavadocs(type: Javadoc, group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name $version"
    // options.memberLevel = JavadocMemberLevel.PRIVATE
    options.links 'https://docs.oracle.com/javase/7/docs/api/'
    
    subprojects.each { project ->
        project.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}
